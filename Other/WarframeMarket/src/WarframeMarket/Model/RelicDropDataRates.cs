/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// RelicDropDataRates
    /// </summary>
    [DataContract(Name = "RelicDropData_rates")]
    public partial class RelicDropDataRates : IEquatable<RelicDropDataRates>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RelicDropDataRates" /> class.
        /// </summary>
        /// <param name="intact">chance to get an item from intact relic.</param>
        /// <param name="exceptional">chance to get an item from exceptional relic.</param>
        /// <param name="flawless">chance to get an item from flawless relic.</param>
        /// <param name="radiant">chance to get an item from radiant relic.</param>
        public RelicDropDataRates(decimal intact = default(decimal), decimal exceptional = default(decimal), decimal flawless = default(decimal), decimal radiant = default(decimal))
        {
            this.Intact = intact;
            this.Exceptional = exceptional;
            this.Flawless = flawless;
            this.Radiant = radiant;
        }

        /// <summary>
        /// chance to get an item from intact relic
        /// </summary>
        /// <value>chance to get an item from intact relic</value>
        /// <example>5</example>
        [DataMember(Name = "intact", EmitDefaultValue = false)]
        public decimal Intact { get; set; }

        /// <summary>
        /// chance to get an item from exceptional relic
        /// </summary>
        /// <value>chance to get an item from exceptional relic</value>
        /// <example>5</example>
        [DataMember(Name = "exceptional", EmitDefaultValue = false)]
        public decimal Exceptional { get; set; }

        /// <summary>
        /// chance to get an item from flawless relic
        /// </summary>
        /// <value>chance to get an item from flawless relic</value>
        /// <example>5</example>
        [DataMember(Name = "flawless", EmitDefaultValue = false)]
        public decimal Flawless { get; set; }

        /// <summary>
        /// chance to get an item from radiant relic
        /// </summary>
        /// <value>chance to get an item from radiant relic</value>
        /// <example>5</example>
        [DataMember(Name = "radiant", EmitDefaultValue = false)]
        public decimal Radiant { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RelicDropDataRates {\n");
            sb.Append("  Intact: ").Append(Intact).Append("\n");
            sb.Append("  Exceptional: ").Append(Exceptional).Append("\n");
            sb.Append("  Flawless: ").Append(Flawless).Append("\n");
            sb.Append("  Radiant: ").Append(Radiant).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RelicDropDataRates);
        }

        /// <summary>
        /// Returns true if RelicDropDataRates instances are equal
        /// </summary>
        /// <param name="input">Instance of RelicDropDataRates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RelicDropDataRates input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Intact == input.Intact ||
                    this.Intact.Equals(input.Intact)
                ) && 
                (
                    this.Exceptional == input.Exceptional ||
                    this.Exceptional.Equals(input.Exceptional)
                ) && 
                (
                    this.Flawless == input.Flawless ||
                    this.Flawless.Equals(input.Flawless)
                ) && 
                (
                    this.Radiant == input.Radiant ||
                    this.Radiant.Equals(input.Radiant)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Intact.GetHashCode();
                hashCode = (hashCode * 59) + this.Exceptional.GetHashCode();
                hashCode = (hashCode * 59) + this.Flawless.GetHashCode();
                hashCode = (hashCode * 59) + this.Radiant.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

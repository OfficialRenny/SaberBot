/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// SolNodes basically
    /// </summary>
    [DataContract(Name = "Location")]
    public partial class Location : IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="icon">icon.</param>
        /// <param name="nodeName">Node name.</param>
        /// <param name="minLevel">min lvl of npc on this location.</param>
        /// <param name="urlName">urlName.</param>
        /// <param name="thumb">thumb.</param>
        /// <param name="maxLevel">max lvl of npc on this location.</param>
        /// <param name="systemName">System name.</param>
        public Location(string id = default(string), string icon = default(string), string nodeName = default(string), decimal? minLevel = default(decimal?), string urlName = default(string), string thumb = default(string), decimal? maxLevel = default(decimal?), string systemName = default(string))
        {
            this.Id = id;
            this.Icon = icon;
            this.NodeName = nodeName;
            this.MinLevel = minLevel;
            this.UrlName = urlName;
            this.Thumb = thumb;
            this.MaxLevel = maxLevel;
            this.SystemName = systemName;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>5a2feeb1c2c9e90cbdaa23d2</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Icon
        /// </summary>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Node name
        /// </summary>
        /// <value>Node name</value>
        /// <example>Plains of Eidolon</example>
        [DataMember(Name = "node_name", EmitDefaultValue = false)]
        public string NodeName { get; set; }

        /// <summary>
        /// min lvl of npc on this location
        /// </summary>
        /// <value>min lvl of npc on this location</value>
        [DataMember(Name = "min_level", EmitDefaultValue = true)]
        public decimal? MinLevel { get; set; }

        /// <summary>
        /// Gets or Sets UrlName
        /// </summary>
        /// <example>plains_of_eidolon</example>
        [DataMember(Name = "url_name", EmitDefaultValue = false)]
        public string UrlName { get; set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [DataMember(Name = "thumb", EmitDefaultValue = false)]
        public string Thumb { get; set; }

        /// <summary>
        /// max lvl of npc on this location
        /// </summary>
        /// <value>max lvl of npc on this location</value>
        [DataMember(Name = "max_level", EmitDefaultValue = true)]
        public decimal? MaxLevel { get; set; }

        /// <summary>
        /// System name
        /// </summary>
        /// <value>System name</value>
        /// <example>Earth</example>
        [DataMember(Name = "system_name", EmitDefaultValue = false)]
        public string SystemName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  NodeName: ").Append(NodeName).Append("\n");
            sb.Append("  MinLevel: ").Append(MinLevel).Append("\n");
            sb.Append("  UrlName: ").Append(UrlName).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  MaxLevel: ").Append(MaxLevel).Append("\n");
            sb.Append("  SystemName: ").Append(SystemName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.NodeName == input.NodeName ||
                    (this.NodeName != null &&
                    this.NodeName.Equals(input.NodeName))
                ) && 
                (
                    this.MinLevel == input.MinLevel ||
                    (this.MinLevel != null &&
                    this.MinLevel.Equals(input.MinLevel))
                ) && 
                (
                    this.UrlName == input.UrlName ||
                    (this.UrlName != null &&
                    this.UrlName.Equals(input.UrlName))
                ) && 
                (
                    this.Thumb == input.Thumb ||
                    (this.Thumb != null &&
                    this.Thumb.Equals(input.Thumb))
                ) && 
                (
                    this.MaxLevel == input.MaxLevel ||
                    (this.MaxLevel != null &&
                    this.MaxLevel.Equals(input.MaxLevel))
                ) && 
                (
                    this.SystemName == input.SystemName ||
                    (this.SystemName != null &&
                    this.SystemName.Equals(input.SystemName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                if (this.NodeName != null)
                {
                    hashCode = (hashCode * 59) + this.NodeName.GetHashCode();
                }
                if (this.MinLevel != null)
                {
                    hashCode = (hashCode * 59) + this.MinLevel.GetHashCode();
                }
                if (this.UrlName != null)
                {
                    hashCode = (hashCode * 59) + this.UrlName.GetHashCode();
                }
                if (this.Thumb != null)
                {
                    hashCode = (hashCode * 59) + this.Thumb.GetHashCode();
                }
                if (this.MaxLevel != null)
                {
                    hashCode = (hashCode * 59) + this.MaxLevel.GetHashCode();
                }
                if (this.SystemName != null)
                {
                    hashCode = (hashCode * 59) + this.SystemName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// CurrentUserPatreonProfile
    /// </summary>
    [DataContract(Name = "currentUser_patreon_profile")]
    public partial class CurrentUserPatreonProfile : IEquatable<CurrentUserPatreonProfile>, IValidatableObject
    {
        /// <summary>
        /// Defines PatreonBadge
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum PatreonBadgeEnum
        {
            /// <summary>
            /// Enum Bronze for value: bronze
            /// </summary>
            [EnumMember(Value = "bronze")]
            Bronze = 1,

            /// <summary>
            /// Enum Gold for value: gold
            /// </summary>
            [EnumMember(Value = "gold")]
            Gold = 2,

            /// <summary>
            /// Enum Silver for value: silver
            /// </summary>
            [EnumMember(Value = "silver")]
            Silver = 3,

            /// <summary>
            /// Enum Platinum for value: platinum
            /// </summary>
            [EnumMember(Value = "platinum")]
            Platinum = 4
        }


        /// <summary>
        /// Gets or Sets PatreonBadge
        /// </summary>
        [DataMember(Name = "patreon_badge", EmitDefaultValue = false)]
        public PatreonBadgeEnum? PatreonBadge { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="CurrentUserPatreonProfile" /> class.
        /// </summary>
        /// <param name="patreonFounder">patreonFounder.</param>
        /// <param name="subscription">subscription.</param>
        /// <param name="patreonBadge">patreonBadge.</param>
        public CurrentUserPatreonProfile(bool patreonFounder = default(bool), bool subscription = default(bool), PatreonBadgeEnum? patreonBadge = default(PatreonBadgeEnum?))
        {
            this.PatreonFounder = patreonFounder;
            this.Subscription = subscription;
            this.PatreonBadge = patreonBadge;
        }

        /// <summary>
        /// Gets or Sets PatreonFounder
        /// </summary>
        [DataMember(Name = "patreon_founder", EmitDefaultValue = true)]
        public bool PatreonFounder { get; set; }

        /// <summary>
        /// Gets or Sets Subscription
        /// </summary>
        [DataMember(Name = "subscription", EmitDefaultValue = true)]
        public bool Subscription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class CurrentUserPatreonProfile {\n");
            sb.Append("  PatreonFounder: ").Append(PatreonFounder).Append("\n");
            sb.Append("  Subscription: ").Append(Subscription).Append("\n");
            sb.Append("  PatreonBadge: ").Append(PatreonBadge).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CurrentUserPatreonProfile);
        }

        /// <summary>
        /// Returns true if CurrentUserPatreonProfile instances are equal
        /// </summary>
        /// <param name="input">Instance of CurrentUserPatreonProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CurrentUserPatreonProfile input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PatreonFounder == input.PatreonFounder ||
                    this.PatreonFounder.Equals(input.PatreonFounder)
                ) && 
                (
                    this.Subscription == input.Subscription ||
                    this.Subscription.Equals(input.Subscription)
                ) && 
                (
                    this.PatreonBadge == input.PatreonBadge ||
                    this.PatreonBadge.Equals(input.PatreonBadge)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.PatreonFounder.GetHashCode();
                hashCode = (hashCode * 59) + this.Subscription.GetHashCode();
                hashCode = (hashCode * 59) + this.PatreonBadge.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

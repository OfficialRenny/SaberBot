/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// RivenItem
    /// </summary>
    [DataContract(Name = "rivenItem")]
    public partial class RivenItem : IEquatable<RivenItem>, IValidatableObject
    {
        /// <summary>
        /// Group of the item, like shotgin, rifle, melee, etc.   Used for grouping within UI elements. 
        /// </summary>
        /// <value>Group of the item, like shotgin, rifle, melee, etc.   Used for grouping within UI elements. </value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum GroupEnum
        {
            /// <summary>
            /// Enum Primary for value: primary
            /// </summary>
            [EnumMember(Value = "primary")]
            Primary = 1,

            /// <summary>
            /// Enum Secondary for value: secondary
            /// </summary>
            [EnumMember(Value = "secondary")]
            Secondary = 2,

            /// <summary>
            /// Enum Melee for value: melee
            /// </summary>
            [EnumMember(Value = "melee")]
            Melee = 3,

            /// <summary>
            /// Enum Zaw for value: zaw
            /// </summary>
            [EnumMember(Value = "zaw")]
            Zaw = 4,

            /// <summary>
            /// Enum Sentinel for value: sentinel
            /// </summary>
            [EnumMember(Value = "sentinel")]
            Sentinel = 5,

            /// <summary>
            /// Enum Archgun for value: archgun
            /// </summary>
            [EnumMember(Value = "archgun")]
            Archgun = 6,

            /// <summary>
            /// Enum Kitgun for value: kitgun
            /// </summary>
            [EnumMember(Value = "kitgun")]
            Kitgun = 7
        }


        /// <summary>
        /// Group of the item, like shotgin, rifle, melee, etc.   Used for grouping within UI elements. 
        /// </summary>
        /// <value>Group of the item, like shotgin, rifle, melee, etc.   Used for grouping within UI elements. </value>
        [DataMember(Name = "group", EmitDefaultValue = false)]
        public GroupEnum? Group { get; set; }
        /// <summary>
        /// Type of the riven mod, to restrict certain attributes to specific types.
        /// </summary>
        /// <value>Type of the riven mod, to restrict certain attributes to specific types.</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RivenTypeEnum
        {
            /// <summary>
            /// Enum Shotgun for value: shotgun
            /// </summary>
            [EnumMember(Value = "shotgun")]
            Shotgun = 1,

            /// <summary>
            /// Enum Rifle for value: rifle
            /// </summary>
            [EnumMember(Value = "rifle")]
            Rifle = 2,

            /// <summary>
            /// Enum Pistol for value: pistol
            /// </summary>
            [EnumMember(Value = "pistol")]
            Pistol = 3,

            /// <summary>
            /// Enum Melee for value: melee
            /// </summary>
            [EnumMember(Value = "melee")]
            Melee = 4,

            /// <summary>
            /// Enum Zaw for value: zaw
            /// </summary>
            [EnumMember(Value = "zaw")]
            Zaw = 5,

            /// <summary>
            /// Enum Kitgun for value: kitgun
            /// </summary>
            [EnumMember(Value = "kitgun")]
            Kitgun = 6
        }


        /// <summary>
        /// Type of the riven mod, to restrict certain attributes to specific types.
        /// </summary>
        /// <value>Type of the riven mod, to restrict certain attributes to specific types.</value>
        [DataMember(Name = "riven_type", EmitDefaultValue = false)]
        public RivenTypeEnum? RivenType { get; set; }
        /// <summary>
        /// Defines IconFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IconFormatEnum
        {
            /// <summary>
            /// Enum Land for value: land
            /// </summary>
            [EnumMember(Value = "land")]
            Land = 1,

            /// <summary>
            /// Enum Port for value: port
            /// </summary>
            [EnumMember(Value = "port")]
            Port = 2
        }


        /// <summary>
        /// Gets or Sets IconFormat
        /// </summary>
        [DataMember(Name = "icon_format", EmitDefaultValue = false)]
        public IconFormatEnum? IconFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="RivenItem" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="urlName">urlName.</param>
        /// <param name="group">Group of the item, like shotgin, rifle, melee, etc.   Used for grouping within UI elements. .</param>
        /// <param name="rivenType">Type of the riven mod, to restrict certain attributes to specific types..</param>
        /// <param name="icon">path to the icon asset file.</param>
        /// <param name="iconFormat">iconFormat.</param>
        /// <param name="thumb">thumb.</param>
        /// <param name="itemName">Name of the weapon, depends on the requested language (headers).</param>
        public RivenItem(string id = default(string), string urlName = default(string), GroupEnum? group = default(GroupEnum?), RivenTypeEnum? rivenType = default(RivenTypeEnum?), string icon = default(string), IconFormatEnum? iconFormat = default(IconFormatEnum?), string thumb = default(string), string itemName = default(string))
        {
            this.Id = id;
            this.UrlName = urlName;
            this.Group = group;
            this.RivenType = rivenType;
            this.Icon = icon;
            this.IconFormat = iconFormat;
            this.Thumb = thumb;
            this.ItemName = itemName;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>5cf5724f9597e1019b1678c7</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets UrlName
        /// </summary>
        /// <example>falcor</example>
        [DataMember(Name = "url_name", EmitDefaultValue = false)]
        public string UrlName { get; set; }

        /// <summary>
        /// path to the icon asset file
        /// </summary>
        /// <value>path to the icon asset file</value>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Gets or Sets Thumb
        /// </summary>
        [DataMember(Name = "thumb", EmitDefaultValue = false)]
        public string Thumb { get; set; }

        /// <summary>
        /// Name of the weapon, depends on the requested language (headers)
        /// </summary>
        /// <value>Name of the weapon, depends on the requested language (headers)</value>
        [DataMember(Name = "item_name", EmitDefaultValue = false)]
        public string ItemName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class RivenItem {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UrlName: ").Append(UrlName).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  RivenType: ").Append(RivenType).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IconFormat: ").Append(IconFormat).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  ItemName: ").Append(ItemName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RivenItem);
        }

        /// <summary>
        /// Returns true if RivenItem instances are equal
        /// </summary>
        /// <param name="input">Instance of RivenItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RivenItem input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UrlName == input.UrlName ||
                    (this.UrlName != null &&
                    this.UrlName.Equals(input.UrlName))
                ) && 
                (
                    this.Group == input.Group ||
                    this.Group.Equals(input.Group)
                ) && 
                (
                    this.RivenType == input.RivenType ||
                    this.RivenType.Equals(input.RivenType)
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.IconFormat == input.IconFormat ||
                    this.IconFormat.Equals(input.IconFormat)
                ) && 
                (
                    this.Thumb == input.Thumb ||
                    (this.Thumb != null &&
                    this.Thumb.Equals(input.Thumb))
                ) && 
                (
                    this.ItemName == input.ItemName ||
                    (this.ItemName != null &&
                    this.ItemName.Equals(input.ItemName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UrlName != null)
                {
                    hashCode = (hashCode * 59) + this.UrlName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Group.GetHashCode();
                hashCode = (hashCode * 59) + this.RivenType.GetHashCode();
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IconFormat.GetHashCode();
                if (this.Thumb != null)
                {
                    hashCode = (hashCode * 59) + this.Thumb.GetHashCode();
                }
                if (this.ItemName != null)
                {
                    hashCode = (hashCode * 59) + this.ItemName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

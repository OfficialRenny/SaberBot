/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// AuctionsEntryAuctionIdBidsGet200ResponsePayload
    /// </summary>
    [DataContract(Name = "_auctions_entry__auction_id__bids_get_200_response_payload")]
    public partial class AuctionsEntryAuctionIdBidsGet200ResponsePayload : IEquatable<AuctionsEntryAuctionIdBidsGet200ResponsePayload>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuctionsEntryAuctionIdBidsGet200ResponsePayload" /> class.
        /// </summary>
        /// <param name="bids">bids.</param>
        public AuctionsEntryAuctionIdBidsGet200ResponsePayload(List<Bid> bids = default(List<Bid>))
        {
            this.Bids = bids;
        }

        /// <summary>
        /// Gets or Sets Bids
        /// </summary>
        [DataMember(Name = "bids", EmitDefaultValue = false)]
        public List<Bid> Bids { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuctionsEntryAuctionIdBidsGet200ResponsePayload {\n");
            sb.Append("  Bids: ").Append(Bids).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuctionsEntryAuctionIdBidsGet200ResponsePayload);
        }

        /// <summary>
        /// Returns true if AuctionsEntryAuctionIdBidsGet200ResponsePayload instances are equal
        /// </summary>
        /// <param name="input">Instance of AuctionsEntryAuctionIdBidsGet200ResponsePayload to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuctionsEntryAuctionIdBidsGet200ResponsePayload input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Bids == input.Bids ||
                    this.Bids != null &&
                    input.Bids != null &&
                    this.Bids.SequenceEqual(input.Bids)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Bids != null)
                {
                    hashCode = (hashCode * 59) + this.Bids.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

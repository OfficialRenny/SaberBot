/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// DropsourceMissions
    /// </summary>
    [DataContract(Name = "DropsourceMissions")]
    public partial class DropsourceMissions : IEquatable<DropsourceMissions>, IValidatableObject
    {
        /// <summary>
        /// How rare item is
        /// </summary>
        /// <value>How rare item is</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RarityEnum
        {
            /// <summary>
            /// Enum VeryCommon for value: very_common
            /// </summary>
            [EnumMember(Value = "very_common")]
            VeryCommon = 1,

            /// <summary>
            /// Enum Common for value: common
            /// </summary>
            [EnumMember(Value = "common")]
            Common = 2,

            /// <summary>
            /// Enum Uncommon for value: uncommon
            /// </summary>
            [EnumMember(Value = "uncommon")]
            Uncommon = 3,

            /// <summary>
            /// Enum Rare for value: rare
            /// </summary>
            [EnumMember(Value = "rare")]
            Rare = 4,

            /// <summary>
            /// Enum Legendary for value: legendary
            /// </summary>
            [EnumMember(Value = "legendary")]
            Legendary = 5

        }


        /// <summary>
        /// How rare item is
        /// </summary>
        /// <value>How rare item is</value>
        [DataMember(Name = "rarity", EmitDefaultValue = false)]
        public RarityEnum? Rarity { get; set; }
        /// <summary>
        /// Defines ItemSubtype
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum ItemSubtypeEnum
        {
            /// <summary>
            /// Enum Intact for value: intact
            /// </summary>
            [EnumMember(Value = "intact")]
            Intact = 1,

            /// <summary>
            /// Enum Exceptional for value: exceptional
            /// </summary>
            [EnumMember(Value = "exceptional")]
            Exceptional = 2,

            /// <summary>
            /// Enum Flawless for value: flawless
            /// </summary>
            [EnumMember(Value = "flawless")]
            Flawless = 3,

            /// <summary>
            /// Enum Radiant for value: radiant
            /// </summary>
            [EnumMember(Value = "radiant")]
            Radiant = 4,

            /// <summary>
            /// Enum Small for value: small
            /// </summary>
            [EnumMember(Value = "small")]
            Small = 5,

            /// <summary>
            /// Enum Medium for value: medium
            /// </summary>
            [EnumMember(Value = "medium")]
            Medium = 6,

            /// <summary>
            /// Enum Large for value: large
            /// </summary>
            [EnumMember(Value = "large")]
            Large = 7,

            /// <summary>
            /// Enum Basic for value: basic
            /// </summary>
            [EnumMember(Value = "basic")]
            Basic = 8,

            /// <summary>
            /// Enum Adorned for value: adorned
            /// </summary>
            [EnumMember(Value = "adorned")]
            Adorned = 9,

            /// <summary>
            /// Enum Magnificent for value: magnificent
            /// </summary>
            [EnumMember(Value = "magnificent")]
            Magnificent = 10

        }


        /// <summary>
        /// Gets or Sets ItemSubtype
        /// </summary>
        [DataMember(Name = "item_subtype", EmitDefaultValue = false)]
        public ItemSubtypeEnum? ItemSubtype { get; set; }
        /// <summary>
        /// Defines Rotation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RotationEnum
        {
            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 1,

            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 2,

            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3

        }


        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name = "rotation", EmitDefaultValue = false)]
        public RotationEnum? Rotation { get; set; }
        /// <summary>
        /// openworld missions only
        /// </summary>
        /// <value>openworld missions only</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StageEnum
        {
            /// <summary>
            /// Enum _1 for value: 1
            /// </summary>
            [EnumMember(Value = "1")]
            _1 = 1,

            /// <summary>
            /// Enum _2 for value: 2
            /// </summary>
            [EnumMember(Value = "2")]
            _2 = 2,

            /// <summary>
            /// Enum _3 for value: 3
            /// </summary>
            [EnumMember(Value = "3")]
            _3 = 3,

            /// <summary>
            /// Enum _4 for value: 4
            /// </summary>
            [EnumMember(Value = "4")]
            _4 = 4,

            /// <summary>
            /// Enum Final for value: final
            /// </summary>
            [EnumMember(Value = "final")]
            Final = 5

        }


        /// <summary>
        /// openworld missions only
        /// </summary>
        /// <value>openworld missions only</value>
        [DataMember(Name = "stage", EmitDefaultValue = false)]
        public StageEnum? Stage { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="DropsourceMissions" /> class.
        /// </summary>
        /// <param name="missionId">missionId.</param>
        /// <param name="nodeId">nodeId.</param>
        /// <param name="rarity">How rare item is.</param>
        /// <param name="rate">rate.</param>
        /// <param name="itemSubtype">itemSubtype.</param>
        /// <param name="rotation">rotation.</param>
        /// <param name="stage">openworld missions only.</param>
        public DropsourceMissions(string missionId = default(string), string nodeId = default(string), RarityEnum? rarity = default(RarityEnum?), decimal rate = default(decimal), ItemSubtypeEnum? itemSubtype = default(ItemSubtypeEnum?), RotationEnum? rotation = default(RotationEnum?), StageEnum? stage = default(StageEnum?))
        {
            this.MissionId = missionId;
            this.NodeId = nodeId;
            this.Rarity = rarity;
            this.Rate = rate;
            this.ItemSubtype = itemSubtype;
            this.Rotation = rotation;
            this.Stage = stage;
        }

        /// <summary>
        /// Gets or Sets MissionId
        /// </summary>
        /// <example>&quot;5a2feeb1c2c9e90cbdaa23d2&quot;</example>
        [DataMember(Name = "mission_id", EmitDefaultValue = false)]
        public string MissionId { get; set; }

        /// <summary>
        /// Gets or Sets NodeId
        /// </summary>
        /// <example>&quot;5a2feeb1c2c9e90cbdaa23d2&quot;</example>
        [DataMember(Name = "node_id", EmitDefaultValue = false)]
        public string NodeId { get; set; }

        /// <summary>
        /// Gets or Sets Rate
        /// </summary>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class DropsourceMissions {\n");
            sb.Append("  MissionId: ").Append(MissionId).Append("\n");
            sb.Append("  NodeId: ").Append(NodeId).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  ItemSubtype: ").Append(ItemSubtype).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("  Stage: ").Append(Stage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DropsourceMissions);
        }

        /// <summary>
        /// Returns true if DropsourceMissions instances are equal
        /// </summary>
        /// <param name="input">Instance of DropsourceMissions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DropsourceMissions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MissionId == input.MissionId ||
                    (this.MissionId != null &&
                    this.MissionId.Equals(input.MissionId))
                ) && 
                (
                    this.NodeId == input.NodeId ||
                    (this.NodeId != null &&
                    this.NodeId.Equals(input.NodeId))
                ) && 
                (
                    this.Rarity == input.Rarity ||
                    this.Rarity.Equals(input.Rarity)
                ) && 
                (
                    this.Rate == input.Rate ||
                    this.Rate.Equals(input.Rate)
                ) && 
                (
                    this.ItemSubtype == input.ItemSubtype ||
                    this.ItemSubtype.Equals(input.ItemSubtype)
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    this.Rotation.Equals(input.Rotation)
                ) && 
                (
                    this.Stage == input.Stage ||
                    this.Stage.Equals(input.Stage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MissionId != null)
                {
                    hashCode = (hashCode * 59) + this.MissionId.GetHashCode();
                }
                if (this.NodeId != null)
                {
                    hashCode = (hashCode * 59) + this.NodeId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rarity.GetHashCode();
                hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                hashCode = (hashCode * 59) + this.ItemSubtype.GetHashCode();
                hashCode = (hashCode * 59) + this.Rotation.GetHashCode();
                hashCode = (hashCode * 59) + this.Stage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// What you can get from this mission as reward
    /// </summary>
    [DataContract(Name = "MissionDropData")]
    public partial class MissionDropData : IEquatable<MissionDropData>, IValidatableObject
    {
        /// <summary>
        /// Defines Type
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum TypeEnum
        {
            /// <summary>
            /// Enum Mission for value: mission
            /// </summary>
            [EnumMember(Value = "mission")]
            Mission = 1
        }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public TypeEnum? Type { get; set; }

        /// <summary>
        /// Gets or Sets Rarity
        /// </summary>
        [DataMember(Name = "rarity", EmitDefaultValue = false)]
        public Rarities? Rarity { get; set; }
        /// <summary>
        /// Defines Rotation
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum RotationEnum
        {
            /// <summary>
            /// Enum B for value: b
            /// </summary>
            [EnumMember(Value = "b")]
            B = 1,

            /// <summary>
            /// Enum A for value: a
            /// </summary>
            [EnumMember(Value = "a")]
            A = 2,

            /// <summary>
            /// Enum C for value: c
            /// </summary>
            [EnumMember(Value = "c")]
            C = 3
        }


        /// <summary>
        /// Gets or Sets Rotation
        /// </summary>
        [DataMember(Name = "rotation", EmitDefaultValue = false)]
        public RotationEnum? Rotation { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="MissionDropData" /> class.
        /// </summary>
        /// <param name="type">type.</param>
        /// <param name="item">id of an item.</param>
        /// <param name="mission">id of a mission.</param>
        /// <param name="location">id of a location.</param>
        /// <param name="rate">Chance to get item on mission completion or rotation completion.</param>
        /// <param name="rarity">rarity.</param>
        /// <param name="rotation">rotation.</param>
        public MissionDropData(TypeEnum? type = default(TypeEnum?), string item = default(string), string mission = default(string), string location = default(string), decimal rate = default(decimal), Rarities? rarity = default(Rarities?), RotationEnum? rotation = default(RotationEnum?))
        {
            this.Type = type;
            this.Item = item;
            this.Mission = mission;
            this.Location = location;
            this.Rate = rate;
            this.Rarity = rarity;
            this.Rotation = rotation;
        }

        /// <summary>
        /// id of an item
        /// </summary>
        /// <value>id of an item</value>
        /// <example>5a2feeb1c2c9e90cbdaa23d2</example>
        [DataMember(Name = "item", EmitDefaultValue = false)]
        public string Item { get; set; }

        /// <summary>
        /// id of a mission
        /// </summary>
        /// <value>id of a mission</value>
        /// <example>5a2feeb1c2c9e90cbdaa23d2</example>
        [DataMember(Name = "mission", EmitDefaultValue = false)]
        public string Mission { get; set; }

        /// <summary>
        /// id of a location
        /// </summary>
        /// <value>id of a location</value>
        /// <example>5a2feeb1c2c9e90cbdaa23d2</example>
        [DataMember(Name = "location", EmitDefaultValue = false)]
        public string Location { get; set; }

        /// <summary>
        /// Chance to get item on mission completion or rotation completion
        /// </summary>
        /// <value>Chance to get item on mission completion or rotation completion</value>
        /// <example>4.5</example>
        [DataMember(Name = "rate", EmitDefaultValue = false)]
        public decimal Rate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class MissionDropData {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  Mission: ").Append(Mission).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Rate: ").Append(Rate).Append("\n");
            sb.Append("  Rarity: ").Append(Rarity).Append("\n");
            sb.Append("  Rotation: ").Append(Rotation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as MissionDropData);
        }

        /// <summary>
        /// Returns true if MissionDropData instances are equal
        /// </summary>
        /// <param name="input">Instance of MissionDropData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MissionDropData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                ) && 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.Mission == input.Mission ||
                    (this.Mission != null &&
                    this.Mission.Equals(input.Mission))
                ) && 
                (
                    this.Location == input.Location ||
                    (this.Location != null &&
                    this.Location.Equals(input.Location))
                ) && 
                (
                    this.Rate == input.Rate ||
                    this.Rate.Equals(input.Rate)
                ) && 
                (
                    this.Rarity == input.Rarity ||
                    this.Rarity.Equals(input.Rarity)
                ) && 
                (
                    this.Rotation == input.Rotation ||
                    this.Rotation.Equals(input.Rotation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                if (this.Item != null)
                {
                    hashCode = (hashCode * 59) + this.Item.GetHashCode();
                }
                if (this.Mission != null)
                {
                    hashCode = (hashCode * 59) + this.Mission.GetHashCode();
                }
                if (this.Location != null)
                {
                    hashCode = (hashCode * 59) + this.Location.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Rate.GetHashCode();
                hashCode = (hashCode * 59) + this.Rarity.GetHashCode();
                hashCode = (hashCode * 59) + this.Rotation.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

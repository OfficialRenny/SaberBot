/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// ItemCommon
    /// </summary>
    [DataContract(Name = "ItemCommon")]
    public partial class ItemCommon : IEquatable<ItemCommon>, IValidatableObject
    {
        /// <summary>
        /// Defines IconFormat
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum IconFormatEnum
        {
            /// <summary>
            /// Enum Land for value: land
            /// </summary>
            [EnumMember(Value = "land")]
            Land = 1,

            /// <summary>
            /// Enum Port for value: port
            /// </summary>
            [EnumMember(Value = "port")]
            Port = 2
        }


        /// <summary>
        /// Gets or Sets IconFormat
        /// </summary>
        [DataMember(Name = "icon_format", EmitDefaultValue = false)]
        public IconFormatEnum? IconFormat { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ItemCommon" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="urlName">[a-z] snake case name of the item.</param>
        /// <param name="icon">it&#39;s a part of url, if you want to get an image you need to prepend assets root dirrectory: &#x60;http://warframe.market/static/assets/&#x60; .</param>
        /// <param name="iconFormat">iconFormat.</param>
        /// <param name="thumb">Thumb of an icon.</param>
        /// <param name="subIcon">Usually, if item is part of set and not set itself, it will have &#x60;sub_icon&#x60;  like: **Mirage Blueprint** is part of **Mirage Set**, therefore the &#x60;icon&#x60; will be the **Mirage warframe** icon, and the &#x60;sub_icon&#x60; will be the **blueprint** icon .</param>
        /// <param name="modMaxRank">in the next api version will be renamed to &#x60;max_rank&#x60;.</param>
        /// <param name="subtypes">relics and fishes are having this field.</param>
        /// <param name="tags">tags.</param>
        /// <param name="ducats">ducats.</param>
        /// <param name="quantityForSet">quantityForSet.</param>
        public ItemCommon(string id = default(string), string urlName = default(string), string icon = default(string), IconFormatEnum? iconFormat = default(IconFormatEnum?), string thumb = default(string), string subIcon = default(string), int modMaxRank = default(int), List<string> subtypes = default(List<string>), List<string> tags = default(List<string>), int ducats = default(int), int quantityForSet = default(int))
        {
            this.Id = id;
            this.UrlName = urlName;
            this.Icon = icon;
            this.IconFormat = iconFormat;
            this.Thumb = thumb;
            this.SubIcon = subIcon;
            this.ModMaxRank = modMaxRank;
            this.Subtypes = subtypes;
            this.Tags = tags;
            this.Ducats = ducats;
            this.QuantityForSet = quantityForSet;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>604f697f7bdb09603b885d1e</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// [a-z] snake case name of the item
        /// </summary>
        /// <value>[a-z] snake case name of the item</value>
        /// <example>axi_a1_relic</example>
        [DataMember(Name = "url_name", EmitDefaultValue = false)]
        public string UrlName { get; set; }

        /// <summary>
        /// it&#39;s a part of url, if you want to get an image you need to prepend assets root dirrectory: &#x60;http://warframe.market/static/assets/&#x60; 
        /// </summary>
        /// <value>it&#39;s a part of url, if you want to get an image you need to prepend assets root dirrectory: &#x60;http://warframe.market/static/assets/&#x60; </value>
        /// <example>icons/en/axi_a1_relic.a74c06f0cae21bdb8933685c867385f8.png</example>
        [DataMember(Name = "icon", EmitDefaultValue = false)]
        public string Icon { get; set; }

        /// <summary>
        /// Thumb of an icon
        /// </summary>
        /// <value>Thumb of an icon</value>
        /// <example>/icons/en/thumbs/axi_a1_relic.a74c06f0cae21bdb8933685c867385f8.128x128.png</example>
        [DataMember(Name = "thumb", EmitDefaultValue = false)]
        public string Thumb { get; set; }

        /// <summary>
        /// Usually, if item is part of set and not set itself, it will have &#x60;sub_icon&#x60;  like: **Mirage Blueprint** is part of **Mirage Set**, therefore the &#x60;icon&#x60; will be the **Mirage warframe** icon, and the &#x60;sub_icon&#x60; will be the **blueprint** icon 
        /// </summary>
        /// <value>Usually, if item is part of set and not set itself, it will have &#x60;sub_icon&#x60;  like: **Mirage Blueprint** is part of **Mirage Set**, therefore the &#x60;icon&#x60; will be the **Mirage warframe** icon, and the &#x60;sub_icon&#x60; will be the **blueprint** icon </value>
        /// <example>sub_icons/systems_128x128.png</example>
        [DataMember(Name = "sub_icon", EmitDefaultValue = false)]
        public string SubIcon { get; set; }

        /// <summary>
        /// in the next api version will be renamed to &#x60;max_rank&#x60;
        /// </summary>
        /// <value>in the next api version will be renamed to &#x60;max_rank&#x60;</value>
        /// <example>10</example>
        [DataMember(Name = "mod_max_rank", EmitDefaultValue = false)]
        public int ModMaxRank { get; set; }

        /// <summary>
        /// relics and fishes are having this field
        /// </summary>
        /// <value>relics and fishes are having this field</value>
        /// <example>[&quot;intact&quot;,&quot;exceptional&quot;,&quot;flawless&quot;,&quot;radiant&quot;]</example>
        [DataMember(Name = "subtypes", EmitDefaultValue = false)]
        public List<string> Subtypes { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        /// <example>[&quot;relic&quot;,&quot;axi&quot;]</example>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Ducats
        /// </summary>
        /// <example>45</example>
        [DataMember(Name = "ducats", EmitDefaultValue = false)]
        public int Ducats { get; set; }

        /// <summary>
        /// Gets or Sets QuantityForSet
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "quantity_for_set", EmitDefaultValue = false)]
        public int QuantityForSet { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ItemCommon {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  UrlName: ").Append(UrlName).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  IconFormat: ").Append(IconFormat).Append("\n");
            sb.Append("  Thumb: ").Append(Thumb).Append("\n");
            sb.Append("  SubIcon: ").Append(SubIcon).Append("\n");
            sb.Append("  ModMaxRank: ").Append(ModMaxRank).Append("\n");
            sb.Append("  Subtypes: ").Append(Subtypes).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Ducats: ").Append(Ducats).Append("\n");
            sb.Append("  QuantityForSet: ").Append(QuantityForSet).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ItemCommon);
        }

        /// <summary>
        /// Returns true if ItemCommon instances are equal
        /// </summary>
        /// <param name="input">Instance of ItemCommon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ItemCommon input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.UrlName == input.UrlName ||
                    (this.UrlName != null &&
                    this.UrlName.Equals(input.UrlName))
                ) && 
                (
                    this.Icon == input.Icon ||
                    (this.Icon != null &&
                    this.Icon.Equals(input.Icon))
                ) && 
                (
                    this.IconFormat == input.IconFormat ||
                    this.IconFormat.Equals(input.IconFormat)
                ) && 
                (
                    this.Thumb == input.Thumb ||
                    (this.Thumb != null &&
                    this.Thumb.Equals(input.Thumb))
                ) && 
                (
                    this.SubIcon == input.SubIcon ||
                    (this.SubIcon != null &&
                    this.SubIcon.Equals(input.SubIcon))
                ) && 
                (
                    this.ModMaxRank == input.ModMaxRank ||
                    this.ModMaxRank.Equals(input.ModMaxRank)
                ) && 
                (
                    this.Subtypes == input.Subtypes ||
                    this.Subtypes != null &&
                    input.Subtypes != null &&
                    this.Subtypes.SequenceEqual(input.Subtypes)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Ducats == input.Ducats ||
                    this.Ducats.Equals(input.Ducats)
                ) && 
                (
                    this.QuantityForSet == input.QuantityForSet ||
                    this.QuantityForSet.Equals(input.QuantityForSet)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.UrlName != null)
                {
                    hashCode = (hashCode * 59) + this.UrlName.GetHashCode();
                }
                if (this.Icon != null)
                {
                    hashCode = (hashCode * 59) + this.Icon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IconFormat.GetHashCode();
                if (this.Thumb != null)
                {
                    hashCode = (hashCode * 59) + this.Thumb.GetHashCode();
                }
                if (this.SubIcon != null)
                {
                    hashCode = (hashCode * 59) + this.SubIcon.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ModMaxRank.GetHashCode();
                if (this.Subtypes != null)
                {
                    hashCode = (hashCode * 59) + this.Subtypes.GetHashCode();
                }
                if (this.Tags != null)
                {
                    hashCode = (hashCode * 59) + this.Tags.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Ducats.GetHashCode();
                hashCode = (hashCode * 59) + this.QuantityForSet.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

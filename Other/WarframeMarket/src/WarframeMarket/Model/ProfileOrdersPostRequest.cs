/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = WarframeMarket.Client.OpenAPIDateConverter;

namespace WarframeMarket.Model
{
    /// <summary>
    /// ProfileOrdersPostRequest
    /// </summary>
    [DataContract(Name = "_profile_orders_post_request")]
    public partial class ProfileOrdersPostRequest : IEquatable<ProfileOrdersPostRequest>, IValidatableObject
    {
        /// <summary>
        /// Defines OrderType
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum OrderTypeEnum
        {
            /// <summary>
            /// Enum Sell for value: sell
            /// </summary>
            [EnumMember(Value = "sell")]
            Sell = 1,

            /// <summary>
            /// Enum Buy for value: buy
            /// </summary>
            [EnumMember(Value = "buy")]
            Buy = 2
        }


        /// <summary>
        /// Gets or Sets OrderType
        /// </summary>
        /// <example>sell</example>
        [DataMember(Name = "order_type", EmitDefaultValue = false)]
        public OrderTypeEnum? OrderType { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="ProfileOrdersPostRequest" /> class.
        /// </summary>
        /// <param name="item">ObjectId of an item.</param>
        /// <param name="orderType">orderType.</param>
        /// <param name="platinum">platinum.</param>
        /// <param name="quantity">quantity.</param>
        /// <param name="visible">visible.</param>
        /// <param name="rank">rank.</param>
        /// <param name="subtype">Check item &#x60;subtypes&#x60; field for possible values.</param>
        public ProfileOrdersPostRequest(string item = default(string), OrderTypeEnum? orderType = default(OrderTypeEnum?), int platinum = default(int), int quantity = default(int), bool visible = default(bool), int rank = default(int), string subtype = default(string))
        {
            this.Item = item;
            this.OrderType = orderType;
            this.Platinum = platinum;
            this.Quantity = quantity;
            this.Visible = visible;
            this.Rank = rank;
            this.Subtype = subtype;
        }

        /// <summary>
        /// ObjectId of an item
        /// </summary>
        /// <value>ObjectId of an item</value>
        /// <example>59e203ce115f1d887cfd7ac6</example>
        [DataMember(Name = "item", EmitDefaultValue = false)]
        public string Item { get; set; }

        /// <summary>
        /// Gets or Sets Platinum
        /// </summary>
        /// <example>12</example>
        [DataMember(Name = "platinum", EmitDefaultValue = false)]
        public int Platinum { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        /// <example>5</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public int Quantity { get; set; }

        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        /// <example>true</example>
        [DataMember(Name = "visible", EmitDefaultValue = true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Gets or Sets Rank
        /// </summary>
        /// <example>3</example>
        [DataMember(Name = "rank", EmitDefaultValue = false)]
        public int Rank { get; set; }

        /// <summary>
        /// Check item &#x60;subtypes&#x60; field for possible values
        /// </summary>
        /// <value>Check item &#x60;subtypes&#x60; field for possible values</value>
        /// <example>flawless</example>
        [DataMember(Name = "subtype", EmitDefaultValue = false)]
        public string Subtype { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ProfileOrdersPostRequest {\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  OrderType: ").Append(OrderType).Append("\n");
            sb.Append("  Platinum: ").Append(Platinum).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("  Rank: ").Append(Rank).Append("\n");
            sb.Append("  Subtype: ").Append(Subtype).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ProfileOrdersPostRequest);
        }

        /// <summary>
        /// Returns true if ProfileOrdersPostRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of ProfileOrdersPostRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileOrdersPostRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Item == input.Item ||
                    (this.Item != null &&
                    this.Item.Equals(input.Item))
                ) && 
                (
                    this.OrderType == input.OrderType ||
                    this.OrderType.Equals(input.OrderType)
                ) && 
                (
                    this.Platinum == input.Platinum ||
                    this.Platinum.Equals(input.Platinum)
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                ) && 
                (
                    this.Visible == input.Visible ||
                    this.Visible.Equals(input.Visible)
                ) && 
                (
                    this.Rank == input.Rank ||
                    this.Rank.Equals(input.Rank)
                ) && 
                (
                    this.Subtype == input.Subtype ||
                    (this.Subtype != null &&
                    this.Subtype.Equals(input.Subtype))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Item != null)
                {
                    hashCode = (hashCode * 59) + this.Item.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OrderType.GetHashCode();
                hashCode = (hashCode * 59) + this.Platinum.GetHashCode();
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                hashCode = (hashCode * 59) + this.Visible.GetHashCode();
                hashCode = (hashCode * 59) + this.Rank.GetHashCode();
                if (this.Subtype != null)
                {
                    hashCode = (hashCode * 59) + this.Subtype.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}

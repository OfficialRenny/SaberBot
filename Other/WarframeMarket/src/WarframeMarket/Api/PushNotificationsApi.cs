/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using WarframeMarket.Client;
using WarframeMarket.Model;

namespace WarframeMarket.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPushNotificationsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Push Unsubscribe
        /// </summary>
        /// <remarks>
        /// Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsNotificationsPushPost200Response</returns>
        SettingsNotificationsPushPost200Response SettingsNotificationsPushDelete(int operationIndex = 0);

        /// <summary>
        /// Push Unsubscribe
        /// </summary>
        /// <remarks>
        /// Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsNotificationsPushPost200Response</returns>
        ApiResponse<SettingsNotificationsPushPost200Response> SettingsNotificationsPushDeleteWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// Not implemented
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void SettingsNotificationsPushGet(int operationIndex = 0);

        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// Not implemented
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> SettingsNotificationsPushGetWithHttpInfo(int operationIndex = 0);
        /// <summary>
        /// Push subscribe
        /// </summary>
        /// <remarks>
        /// There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsNotificationsPushPost200Response</returns>
        SettingsNotificationsPushPost200Response SettingsNotificationsPushPost(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0);

        /// <summary>
        /// Push subscribe
        /// </summary>
        /// <remarks>
        /// There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsNotificationsPushPost200Response</returns>
        ApiResponse<SettingsNotificationsPushPost200Response> SettingsNotificationsPushPostWithHttpInfo(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPushNotificationsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Push Unsubscribe
        /// </summary>
        /// <remarks>
        /// Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsNotificationsPushPost200Response</returns>
        System.Threading.Tasks.Task<SettingsNotificationsPushPost200Response> SettingsNotificationsPushDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Push Unsubscribe
        /// </summary>
        /// <remarks>
        /// Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsNotificationsPushPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsNotificationsPushPost200Response>> SettingsNotificationsPushDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// Not implemented
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task SettingsNotificationsPushGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Get subscription
        /// </summary>
        /// <remarks>
        /// Not implemented
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> SettingsNotificationsPushGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Push subscribe
        /// </summary>
        /// <remarks>
        /// There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsNotificationsPushPost200Response</returns>
        System.Threading.Tasks.Task<SettingsNotificationsPushPost200Response> SettingsNotificationsPushPostAsync(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Push subscribe
        /// </summary>
        /// <remarks>
        /// There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </remarks>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsNotificationsPushPost200Response)</returns>
        System.Threading.Tasks.Task<ApiResponse<SettingsNotificationsPushPost200Response>> SettingsNotificationsPushPostWithHttpInfoAsync(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IPushNotificationsApi : IPushNotificationsApiSync, IPushNotificationsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class PushNotificationsApi : IPushNotificationsApi
    {
        private WarframeMarket.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PushNotificationsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public PushNotificationsApi(string basePath)
        {
            this.Configuration = WarframeMarket.Client.Configuration.MergeConfigurations(
                WarframeMarket.Client.GlobalConfiguration.Instance,
                new WarframeMarket.Client.Configuration { BasePath = basePath }
            );
            this.Client = new WarframeMarket.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WarframeMarket.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = WarframeMarket.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public PushNotificationsApi(WarframeMarket.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = WarframeMarket.Client.Configuration.MergeConfigurations(
                WarframeMarket.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new WarframeMarket.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new WarframeMarket.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = WarframeMarket.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PushNotificationsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public PushNotificationsApi(WarframeMarket.Client.ISynchronousClient client, WarframeMarket.Client.IAsynchronousClient asyncClient, WarframeMarket.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = WarframeMarket.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public WarframeMarket.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public WarframeMarket.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public WarframeMarket.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public WarframeMarket.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Push Unsubscribe Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsNotificationsPushPost200Response</returns>
        public SettingsNotificationsPushPost200Response SettingsNotificationsPushDelete(int operationIndex = 0)
        {
            WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response> localVarResponse = SettingsNotificationsPushDeleteWithHttpInfo();
            return localVarResponse.Data;
        }

        /// <summary>
        /// Push Unsubscribe Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsNotificationsPushPost200Response</returns>
        public WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response> SettingsNotificationsPushDeleteWithHttpInfo(int operationIndex = 0)
        {
            WarframeMarket.Client.RequestOptions localVarRequestOptions = new WarframeMarket.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WarframeMarket.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WarframeMarket.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PushNotificationsApi.SettingsNotificationsPushDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JWT")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JWT", this.Configuration.GetApiKeyWithPrefix("JWT")));
            }
            // authentication (JWTHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<SettingsNotificationsPushPost200Response>("/settings/notifications/push", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsNotificationsPushDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push Unsubscribe Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsNotificationsPushPost200Response</returns>
        public async System.Threading.Tasks.Task<SettingsNotificationsPushPost200Response> SettingsNotificationsPushDeleteAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response> localVarResponse = await SettingsNotificationsPushDeleteWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Push Unsubscribe Unflag &#x60;subscribed&#x60; in our DB from currentUser.
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsNotificationsPushPost200Response)</returns>
        public async System.Threading.Tasks.Task<WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response>> SettingsNotificationsPushDeleteWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WarframeMarket.Client.RequestOptions localVarRequestOptions = new WarframeMarket.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WarframeMarket.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WarframeMarket.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PushNotificationsApi.SettingsNotificationsPushDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JWT")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JWT", this.Configuration.GetApiKeyWithPrefix("JWT")));
            }
            // authentication (JWTHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<SettingsNotificationsPushPost200Response>("/settings/notifications/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsNotificationsPushDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subscription Not implemented
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void SettingsNotificationsPushGet(int operationIndex = 0)
        {
            SettingsNotificationsPushGetWithHttpInfo();
        }

        /// <summary>
        /// Get subscription Not implemented
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public WarframeMarket.Client.ApiResponse<Object> SettingsNotificationsPushGetWithHttpInfo(int operationIndex = 0)
        {
            WarframeMarket.Client.RequestOptions localVarRequestOptions = new WarframeMarket.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = WarframeMarket.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WarframeMarket.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PushNotificationsApi.SettingsNotificationsPushGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JWT")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JWT", this.Configuration.GetApiKeyWithPrefix("JWT")));
            }
            // authentication (JWTHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<Object>("/settings/notifications/push", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsNotificationsPushGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Get subscription Not implemented
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task SettingsNotificationsPushGetAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await SettingsNotificationsPushGetWithHttpInfoAsync(operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Get subscription Not implemented
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<WarframeMarket.Client.ApiResponse<Object>> SettingsNotificationsPushGetWithHttpInfoAsync(int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WarframeMarket.Client.RequestOptions localVarRequestOptions = new WarframeMarket.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = WarframeMarket.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WarframeMarket.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }


            localVarRequestOptions.Operation = "PushNotificationsApi.SettingsNotificationsPushGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JWT")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JWT", this.Configuration.GetApiKeyWithPrefix("JWT")));
            }
            // authentication (JWTHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/settings/notifications/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsNotificationsPushGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push subscribe There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>SettingsNotificationsPushPost200Response</returns>
        public SettingsNotificationsPushPost200Response SettingsNotificationsPushPost(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0)
        {
            WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response> localVarResponse = SettingsNotificationsPushPostWithHttpInfo(settingsNotificationsPushPostRequest);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Push subscribe There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of SettingsNotificationsPushPost200Response</returns>
        public WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response> SettingsNotificationsPushPostWithHttpInfo(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0)
        {
            WarframeMarket.Client.RequestOptions localVarRequestOptions = new WarframeMarket.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WarframeMarket.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WarframeMarket.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = settingsNotificationsPushPostRequest;

            localVarRequestOptions.Operation = "PushNotificationsApi.SettingsNotificationsPushPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JWT")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JWT", this.Configuration.GetApiKeyWithPrefix("JWT")));
            }
            // authentication (JWTHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<SettingsNotificationsPushPost200Response>("/settings/notifications/push", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsNotificationsPushPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Push subscribe There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of SettingsNotificationsPushPost200Response</returns>
        public async System.Threading.Tasks.Task<SettingsNotificationsPushPost200Response> SettingsNotificationsPushPostAsync(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response> localVarResponse = await SettingsNotificationsPushPostWithHttpInfoAsync(settingsNotificationsPushPostRequest, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Push subscribe There is 3 formats, for web for android   Web usage: - -- -- -- -- &#x60;&#x60;&#x60; {     &#39;device&#39;: &#39;web&#39;     &#39;subscription&#39;:         {         \&quot;endpointeger\&quot;:\&quot;https://fcm.googleapis.com/fcm/send/...\&quot;,         \&quot;keys\&quot;:{             \&quot;p256dh\&quot;:\&quot;BBya_RhGe...\&quot;,             \&quot;auth\&quot;:\&quot;2PFoLO3K...\&quot;             }         } } &#x60;&#x60;&#x60;  Android usage: - -- -- -- -- &#x60;&#x60;&#x60;   {     &#39;device&#39;: &#39;android&#39;     &#39;subscription&#39;:         {         \&quot;push_token\&quot;:\&quot;asdnOIHSD2134...\&quot;         } } &#x60;&#x60;&#x60; 
        /// </summary>
        /// <exception cref="WarframeMarket.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settingsNotificationsPushPostRequest"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (SettingsNotificationsPushPost200Response)</returns>
        public async System.Threading.Tasks.Task<WarframeMarket.Client.ApiResponse<SettingsNotificationsPushPost200Response>> SettingsNotificationsPushPostWithHttpInfoAsync(SettingsNotificationsPushPostRequest? settingsNotificationsPushPostRequest = default(SettingsNotificationsPushPostRequest?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            WarframeMarket.Client.RequestOptions localVarRequestOptions = new WarframeMarket.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = WarframeMarket.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = WarframeMarket.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = settingsNotificationsPushPostRequest;

            localVarRequestOptions.Operation = "PushNotificationsApi.SettingsNotificationsPushPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (CookieAuth) required
            // cookie parameter support
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("JWT")))
            {
                localVarRequestOptions.Cookies.Add(new Cookie("JWT", this.Configuration.GetApiKeyWithPrefix("JWT")));
            }
            // authentication (JWTHeader) required
            if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarRequestOptions.HeaderParameters.Add("Authorization", this.Configuration.GetApiKeyWithPrefix("Authorization"));
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<SettingsNotificationsPushPost200Response>("/settings/notifications/push", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("SettingsNotificationsPushPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}

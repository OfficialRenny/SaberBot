/*
 * Warframe.market API
 *
 * ## Documentation is under very slow and heavy development  This document will gradually be supplemented and updated over some extended period of time.  ## Unstable endpoints Endpoint that is not stable and probably will be changed in the future will be marked with exclamation sign -> âš  
 *
 * The version of the OpenAPI document: 1.14.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using WarframeMarket.Model;
using WarframeMarket.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace WarframeMarket.Test.Model
{
    /// <summary>
    ///  Class for testing DropsourceRelicsRate
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the model.
    /// </remarks>
    public class DropsourceRelicsRateTests : IDisposable
    {
        // TODO uncomment below to declare an instance variable for DropsourceRelicsRate
        //private DropsourceRelicsRate instance;

        public DropsourceRelicsRateTests()
        {
            // TODO uncomment below to create an instance of DropsourceRelicsRate
            //instance = new DropsourceRelicsRate();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DropsourceRelicsRate
        /// </summary>
        [Fact]
        public void DropsourceRelicsRateInstanceTest()
        {
            // TODO uncomment below to test "IsType" DropsourceRelicsRate
            //Assert.IsType<DropsourceRelicsRate>(instance);
        }


        /// <summary>
        /// Test the property 'Intact'
        /// </summary>
        [Fact]
        public void IntactTest()
        {
            // TODO unit test for the property 'Intact'
        }
        /// <summary>
        /// Test the property 'Exceptional'
        /// </summary>
        [Fact]
        public void ExceptionalTest()
        {
            // TODO unit test for the property 'Exceptional'
        }
        /// <summary>
        /// Test the property 'Flawless'
        /// </summary>
        [Fact]
        public void FlawlessTest()
        {
            // TODO unit test for the property 'Flawless'
        }
        /// <summary>
        /// Test the property 'Radiant'
        /// </summary>
        [Fact]
        public void RadiantTest()
        {
            // TODO unit test for the property 'Radiant'
        }

    }

}
